#
msgid ""
msgstr ""
"Project-Id-Version: Plezuro 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-09 01:49+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/tutorial/about/how_to/index.rst:2
#: ../../source/tutorial/browser_programming/how_to/index.rst:2
msgid "How to"
msgstr ""

#: ../../source/tutorial/about/how_to/index.rst:4
msgid ""
"Currently the main version of the Plezuro is compiled to Javascript. In the "
"future it is planned to compile it to another languages (probably c, c♯, "
"Java, Python, Ruby and PHP, eventually Lisp and Fortran). It exists also an "
"interpreted version implemented in c♯ which is not supported anymore. That "
"version is not compatible in 100% with the mainstream Plezuro. It is "
"something like a prototype of the final product."
msgstr ""

#: ../../source/tutorial/about/how_to/index.rst:13
msgid "Plezuro.js"
msgstr ""

#: ../../source/tutorial/about/index.rst:2
msgid "About Plezuro"
msgstr ""

#: ../../source/tutorial/about/origin/index.rst:2
msgid "Origin"
msgstr ""

#: ../../source/tutorial/about/origin/index.rst:4
msgid ""
"Where does Plezuro come from? Basically its author was not fully satisfied "
"with any existing programming language. So he thought about the inventing of"
" a new one. The name comes from the Esperanto and means 'pleasure'."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:2
msgid "Basic rules"
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:4
msgid ""
"Plezuro is an imperative, object-oriented, functional, procedural and "
"reflective programming language."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:6
msgid "The main ideas are:"
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:8
msgid "The code should be possibly short (as long as it is human readable)."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:10
msgid "Very simple syntax."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:12
msgid "The code should be easy to read for a beginner programmer."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:14
msgid ""
"The power of the language should be based on the standard library, not its "
"syntax."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:16
msgid "Explicit is always better than implicit."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:18
msgid "Everything is a variable."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:20
msgid "Everything is an object."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:22
msgid "Multiple inheritance."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:24
msgid "There is no difference between a module, a class and a namespace."
msgstr ""

#: ../../source/tutorial/about/rules/index.rst:26
msgid ""
"No annotations and other additional syntax - everything is based on the "
"basic syntax of the language."
msgstr ""

#: ../../source/tutorial/basics/builtin_methods/index.rst:2
msgid "Built-in methods"
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:2
msgid "Collections"
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:4
msgid ""
"One of the indispensable features of a programming language are the "
"collections. Of course, Plezuro provides some sorts of it."
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:9
#: ../../source/tutorial/basics/operators/index.rst:34
#: ../../source/tutorial/basics/operators/index.rst:35
msgid "List"
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:24
msgid "Set"
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:34
msgid "Dictionary"
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:48
msgid "Associative array"
msgstr ""

#: ../../source/tutorial/basics/comments/index.rst:2
msgid "Comments"
msgstr ""

#: ../../source/tutorial/basics/conditions/index.rst:2
msgid "Conditions"
msgstr ""

#: ../../source/tutorial/basics/conditions/index.rst:4
msgid ""
"At first, you should write the condition (function that return a boolean "
"value). Then write '.if' and in brackets and curlies write the expression "
"that will be executed when this expression is true. It is just a method of "
"the function type. Then you can use methods 'elif' and 'else' which are not "
"required."
msgstr ""

#: ../../source/tutorial/basics/exceptions/index.rst:2
msgid "Exceptions"
msgstr ""

#: ../../source/tutorial/basics/exceptions/index.rst:4
msgid ""
"One of the powerful features of a programming language is the exception "
"handling. It is also possible in Plezuro. However the syntax is a little bit"
" different because in this language almost all is based on the methods (even"
" conditionals and loops)."
msgstr ""

#: ../../source/tutorial/basics/functions/index.rst:2
msgid "Functions"
msgstr ""

#: ../../source/tutorial/basics/import/index.rst:2
msgid "Import"
msgstr ""

#: ../../source/tutorial/basics/import/index.rst:4
msgid ""
"It is recommended to divide programming projects to multiple source files. "
"You can do it with the 'import' method of the string type. It is also "
"possible to pass same parameters to the imported script, it works in the "
"same way like the function."
msgstr ""

#: ../../source/tutorial/basics/index.rst:2
msgid "Basics"
msgstr ""

#: ../../source/tutorial/basics/loops/index.rst:2
msgid "Loops"
msgstr ""

#: ../../source/tutorial/basics/loops/index.rst:4
msgid ""
"Loops look like conditional expressions. You use a method of the function "
"type."
msgstr ""

#: ../../source/tutorial/basics/loops/index.rst:6
msgid ""
"One of the loops provided in Plezuro is 'while'. At the beginning you write "
"a function which returned value determines if the function being the first "
"argument of the 'while' method is executed. After the first iteration the "
"conditional function is executed again. Execution of the first argument "
"function depends on the value from conditional function and so on."
msgstr ""

#: ../../source/tutorial/basics/loops/index.rst:14
msgid ""
"Another maybe simpler loop is 'do'. You write the conditional function. The "
"execution of the loop depends on the value returned by this function. So it "
"iterates as long as the function returns true."
msgstr ""

#: ../../source/tutorial/basics/magic_constants/index.rst:13
msgid "__line__ - the line number in a source file (counting from 0)"
msgstr ""

#: ../../source/tutorial/basics/magic_constants/index.rst:15
msgid "__file__ - the name of the source file"
msgstr ""

#: ../../source/tutorial/basics/magic_constants/index.rst:17
msgid "__dir__ - the real directory of the source file"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:2
#: ../../source/tutorial/objective/operators/index.rst:2
msgid "Operators"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:41
msgid "Complete list of the operators:"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:43
msgid ""
"single-argument operators (the operator at the left, the argument at the "
"right)"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:52
msgid "single-argument operators (the operator at the right)"
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:2
msgid "Variables"
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:22
msgid "Declaration"
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:24
msgid ""
"Before we can use any variable, we have to declare it. It is pretty simple, "
"just write the name of the variable and the dollar sign ('$') immediately "
"before it. In next occurrences of a variable, you should write it without "
"the dollar sign."
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:30
msgid "Scope"
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:40
msgid "What can be a variable?"
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:42
msgid ""
"In Plezuro there is dynamic typing like in other dynamic languages such as "
"Python, Ruby or Javascript. Also everything is a variable (including "
"functions and modules). So a variable can change its type in the runtime. "
"For example at the first it is a number, then a list and finally a function."
msgstr ""

#: ../../source/tutorial/index.rst:2
msgid "Tutorial"
msgstr ""

#: ../../source/tutorial/objective/constructor/index.rst:2
msgid "Constructor"
msgstr ""

#: ../../source/tutorial/objective/constructor/index.rst:14
msgid ""
"In Plezuro the constructor is a method with the name 'init'. Such a method "
"is called automatically after the object creation."
msgstr ""

#: ../../source/tutorial/objective/constructor/index.rst:19
msgid "Default constructor"
msgstr ""

#: ../../source/tutorial/objective/dynamic_module_change/index.rst:2
msgid "Dynamic module change"
msgstr ""

#: ../../source/tutorial/objective/dynamic_module_change/index.rst:6
msgid "Method addition/change"
msgstr ""

#: ../../source/tutorial/objective/dynamic_module_change/index.rst:8
msgid ""
"Except of creating a method during a module creation you can add dynamically"
" new methods to a module later. We could say 'at the runtime' but this term "
"is not suitable to the Plezuro because in this language everything is at the"
" runtime. The new method is visible in the direct objects of this module "
"(even created before the addition of a new method) as well in the objects of"
" the child modules. You can achieve that using the method 'addMethod'."
msgstr ""

#: ../../source/tutorial/objective/dynamic_module_change/index.rst:18
msgid "Method removing"
msgstr ""

#: ../../source/tutorial/objective/dynamic_module_change/index.rst:20
msgid ""
"It is even possible to remove a method. Nonetheless do not do it without any"
" reason. To do it, use the method 'removeMethod'."
msgstr ""

#: ../../source/tutorial/objective/index.rst:2
msgid "Objective programming"
msgstr ""

#: ../../source/tutorial/objective/index.rst:4
msgid ""
"Plezuro is an object-oriented language, there is multiple inheritance. It is"
" more dynamic then Java and .NET because you can add, change and remove "
"methods at the runtime."
msgstr ""

#: ../../source/tutorial/objective/inheritance/index.rst:2
msgid "Inheritance"
msgstr ""

#: ../../source/tutorial/objective/inheritance/index.rst:4
msgid ""
"To write an object-oriented code except of classes (in Plezuro modules) it "
"is needed to use inheritance and polymorphism. In Plezuro there is multiple "
"inheritance like in Python, it is also similar to multiple inheritance in "
"c++ with virtual method binding. Why multiple inheritance? It is just more "
"similar to the real life. For example, the dog is in the same time a pet and"
" a carnivore."
msgstr ""

#: ../../source/tutorial/objective/inheritance/index.rst:28
msgid "Calling a parent method"
msgstr ""

#: ../../source/tutorial/objective/modules/index.rst:2
msgid "Modules"
msgstr ""

#: ../../source/tutorial/objective/modules/index.rst:9
msgid ""
"To create a module, you write 'Module.create' and you pass one argument to "
"this method which is an associative array containing module name (field "
"'name'), module namespace (field 'namespace', the methods (field 'methods'),"
" the parent modules (field 'parents') - the modules from which our module "
"inherits the methods. There are also some other fields that you can pass."
msgstr ""

#: ../../source/tutorial/objective/objects_and_methods/index.rst:2
msgid "Objects and methods"
msgstr ""

#: ../../source/tutorial/objective/objects_and_methods/index.rst:12
msgid "Object fields"
msgstr ""

#: ../../source/tutorial/objective/objects_and_methods/index.rst:19
msgid "Method from method call"
msgstr ""

#: ../../source/tutorial/objective/objects_and_methods/index.rst:25
msgid ""
"Be aware that when you have an inner function (ex. a loop), the keyword "
"'this' has a different meaning. It is the zero argument of the inner "
"function. In the same way the object fields work."
msgstr ""

#: ../../source/tutorial/objective/static_fields_and_methods/index.rst:2
msgid "Static fields and methods"
msgstr ""

#: ../../source/tutorial/objective/static_fields_and_methods/index.rst:4
msgid ""
"Except of using a module like a template to creating objects, you can use it"
" in a static way with static fields and methods. You have to remember that "
"the static fields and methods are not inherited. Each static field or method"
" is binded strictly with one module."
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:21
msgid ""
"Generally we can specify some main actions of the operators (ex. for numbers"
" and strings)."
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:24
msgid "Type of left argument"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:24
msgid "Operator"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:24
msgid "Action"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:24
msgid "Example"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:24
msgid "Result"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:26
#: ../../source/tutorial/basics/operators/index.rst:27
#: ../../source/tutorial/basics/operators/index.rst:28
#: ../../source/tutorial/basics/operators/index.rst:29
#: ../../source/tutorial/basics/operators/index.rst:30
#: ../../source/tutorial/basics/operators/index.rst:31
msgid "Number"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:26
#: ../../source/tutorial/basics/operators/index.rst:32
#: ../../source/tutorial/basics/operators/index.rst:34
msgid "\\+"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:26
msgid "addition"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:26
msgid "1+4"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:26
msgid "5"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:27
msgid "\\-"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:27
msgid "subtraction"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:27
msgid "4-7"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:27
msgid "-3"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:28
#: ../../source/tutorial/basics/operators/index.rst:33
#: ../../source/tutorial/basics/operators/index.rst:35
msgid "\\*"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:28
#: ../../source/tutorial/basics/operators/index.rst:33
#: ../../source/tutorial/basics/operators/index.rst:35
msgid "multiplication"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:28
msgid "8.5*2"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:28
msgid "17"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:29
msgid "/"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:29
msgid "division"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:29
msgid "1/4"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:29
msgid "0.25"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:30
msgid "^"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:30
msgid "power"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:30
msgid "4^3"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:30
msgid "64"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:31
msgid "%"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:31
msgid "modulo"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:31
msgid "7%3"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:31
msgid "1"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:32
#: ../../source/tutorial/basics/operators/index.rst:33
msgid "String"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:32
#: ../../source/tutorial/basics/operators/index.rst:34
msgid "concatenation"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:32
msgid "'a'+'b'"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:32
msgid "'ab'"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:33
msgid "'a'\\*3"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:33
msgid "'aaa'"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:34
msgid "[2,3]+[1]"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:34
msgid "[2,3,1]"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:35
msgid "[2,3]*2"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:35
msgid "[2,3,2,3]"
msgstr ""

#: ../../source/tutorial/browser_programming/how_to/index.rst:4
msgid ""
"Contrary to Javascript, Plezuro cannot be embedded to HTML. It is not a "
"missing feature, rather a way to maintain a readable code. So you must "
"include a Javascript generated from Plezuro source in an HTML file. Moreover"
" you must include the plezuro.js library."
msgstr ""

#: ../../source/tutorial/browser_programming/index.rst:2
msgid "Web browser programming"
msgstr ""

#: ../../source/tutorial/browser_programming/index.rst:4
msgid ""
"As you just know, Plezuro is compiled to Javascript. So we can write "
"applications runned in the web browser (client-side web apps)."
msgstr ""

#: ../../source/tutorial/browser_programming/index.rst:9
msgid ""
"To be able to develop web apps in Plezuro, you should know HTML and CSS (at "
"least the basics). You can read it from the following tutorials:"
msgstr ""

#: ../../source/tutorial/browser_programming/index.rst:13
msgid "http://www.w3schools.com/html/default.asp"
msgstr ""

#: ../../source/tutorial/browser_programming/index.rst:14
msgid "http://www.w3schools.com/css/default.asp"
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:2
msgid "Output"
msgstr ""

#: ../../source/tutorial/index.rst:4
msgid "This is tutorial of Plezuro programming language."
msgstr ""

#: ../../source/tutorial/index.rst:6
msgid "For whom is it?"
msgstr ""

#: ../../source/tutorial/index.rst:20
msgid "Other useful materials"
msgstr ""

#: ../../source/tutorial/index.rst:22
msgid ""
"If you want to learn more, you can read the specification of Plezuro. It is "
"written in a not complicated manner. This is just a view from another site. "
"You can read Plezuro scripts on Github and try to write something similar."
msgstr ""

#: ../../source/tutorial/about/how_to/index.rst:28
msgid "Basic usage of the compiler: ``plezuro.jar input.plez output.plez.js``"
msgstr ""

#: ../../source/tutorial/browser_programming/ajax/index.rst:2
#: ../../source/tutorial/browser_programming/jQuery/index.rst:13
msgid "AJAX"
msgstr ""

#: ../../source/tutorial/browser_programming/ajax/index.rst:4
msgid ""
"AJAX stands for Asynchronous Javascript and XML. It is a set of web "
"development techniques to create asynchronous web applications. Nonetheless "
"XML is not necessary in AJAX, it can be any sort of data (JSON, CSV, HTML, "
"CSS, images, Javascript). AJAX is almost always associated with a serwer-"
"side programming (a server response dependent on the request). Technically "
"it is always true because you send a request and a server in regard to it "
"returns a response. However not always a script in a language such as PHP, "
"Python or Ruby is needed. Server can also return some static data (ex. "
"images) according to their path. The best example is the Apache 2 server."
msgstr ""

#: ../../source/tutorial/browser_programming/ajax/index.rst:21
msgid ""
"Probably the best way to make an AJAX request is using jQuery at reasons of "
"browser compatibility and code readability."
msgstr ""

#: ../../source/tutorial/browser_programming/ajax/index.rst:0
msgid "ajax/index.html"
msgstr ""

#: ../../source/tutorial/browser_programming/ajax/index.rst:0
msgid "ajax/main.plez"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:2
msgid "AngularJS"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:4
msgid ""
"AngularJS is a framework used mostly in single-page applications. It is a "
"part of MEAN software stack:"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:7
msgid "MongoDB - a database"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:8
msgid "Express.js - a back-end framework"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:9
msgid "AngularJS - a front-end framework"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:10
msgid "Node.js - a back-end platform"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:12
msgid ""
"All of these four technologies are based on Javascript so they are enable to"
" develop in Plezuro."
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:15
msgid ""
"The examples below have origin from https://angularjs.org/ and later were "
"adapted to Plezuro."
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:0
msgid "angular/index.html"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:0
msgid "angular/todo.css"
msgstr ""

#: ../../source/tutorial/browser_programming/angular/index.rst:0
msgid "angular/todo.plez"
msgstr ""

#: ../../source/tutorial/browser_programming/how_to/index.rst:0
msgid "basic/index.html"
msgstr ""

#: ../../source/tutorial/browser_programming/how_to/index.rst:0
msgid "basic/main.plez"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:2
msgid "HTML DOM methods and events"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:11
msgid "How to get an element?"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:13
msgid ""
"You can use the standard Javascript methods in Plezuro. Eventually you can "
"use some methods from external libraries such like jQuery."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:17
msgid "**document.getElementById**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:19
msgid ""
"It returns the element with matching 'id' attribute. Remember if you include"
" your script in the HEAD section, the elements are not loaded so you cannot "
"immediately get any element, in this case you should use the proper event."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:24
msgid "**document.getElementsByTagName**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:26
msgid ""
"It returns the collection of all the elements of the tag name specified as "
"the first argument. For example ``document.getElementsByTagName('div')`` "
"will return the collection of all divs in the document."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:31
msgid "**document.getElementsByName**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:33
msgid ""
"The collection of all the elements with the value of 'name' attribute "
"specified as the first argument."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:37
msgid "**document.getElementsByClassName**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:39
msgid ""
"The collection of all the elements with the value of 'class' attribute "
"specified as the first argument."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:43
msgid "**document.getElementsByTagNameNS**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:45
msgid ""
"Similar to getElementsByTagName but the first argument specifies the name of"
" the namespace and the second one the tag name. It is used rather in XML "
"DOM."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:49
msgid "**document.querySelector**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:51
msgid ""
"It returns the first element that matches the CSS selector in the first "
"argument. For example ``document.querySelector('table button')`` will return"
" the first button in the first table that contain a button."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:56
msgid "**document.querySelectorAll**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:63
msgid "How to operate on elements?"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:65
msgid "**innerHTML**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:67
msgid ""
"It is the simplest way to change the content of an element, it just inserts "
"any HTML into the element. For example ``element['innerHTML'] = "
"'<button>OK</button>'``."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:72
msgid "**setAttribute**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:74
msgid "For example ``element.setAttribute('name', 'age')``"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:77
msgid "**style**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:84
msgid "**document.createElement**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:86
msgid ""
"You can create an element. The first argument specifies the tag name. For "
"example, to create a div, you write ``document.createElement('div')``."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:90
msgid "**document.appendChild**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:92
msgid ""
"When you have just created an element you can add it to another element "
"either existing in the HTML DOM or not."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:96
msgid "**document.removeChild**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:98
msgid "You can remove an element specified as the first argument."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:101
msgid "**document.replaceChild**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:103
msgid ""
"You can replace an element passed as the first argument to an element passed"
" as the second argument."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:107
msgid "**document.createTextNode**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:109
msgid ""
"You can create a text node with the value specified as the first argument "
"and then append such a node to an element."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:115
msgid "How to listen to en event?"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:117
msgid ""
"To provide some interaction it is useful to listen to the events. We can "
"detect among others: a mouse click, a key pressing, a document being loaded,"
" a document mutation, an object mutation, browser window resizing."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:121
msgid ""
"You can see the full list of events for Firefox on "
"https://developer.mozilla.org/en-US/docs/Web/Events, or for any browser on "
"http://www.w3schools.com/tags/ref_eventattributes.asp."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:125
msgid "Let us enumerate the most important ones."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:128
msgid "**onclick**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:130
msgid ""
"It fires after the mouse click (pressing and releasing the mouse button). "
"For example ``element['onclick'] = { this['parentNode'].removeChild(this); "
"null }``"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:134
msgid "**onkeydown**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:136
msgid "It fires after a key being pressed."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:139
msgid "**onkeypress**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:144
msgid "**onkeyup**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:146
msgid "It fires after a key being released."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:0
msgid "dom_methods/index.html"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:0
msgid "dom_methods/main.plez"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:2
msgid "HTML elements"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:10
msgid ""
"This is a powerful tool. In the desktop application development in most of "
"frameworks you cannot use such tool and it makes the front-end development "
"really harder."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:17
#: ../../source/tutorial/browser_programming/storage/index.rst:11
msgid "HTML DOM"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:20
msgid "**What is an HTML element?**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:26
msgid "**What is a tree?**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:28
msgid ""
"We can imagine an object tree like a real tree. Each element (node) is a "
"place where one branch is divided to multiple branches (in a special case "
"still one), a leaf (where the tree ends) or the begin of the tree (where it "
"grows out of the ground)."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:33
msgid "**Relations in a tree**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:35
msgid "One element for another can be:"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:37
msgid "child (in special case the first child)"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:38
msgid "parent"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:39
msgid "sibling (in special case the next sibling)"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:40
msgid "ancestor"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:41
msgid "offspring"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:42
msgid "none of the above"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:44
msgid ""
"Let us notice a child is also an offspring, as well a parent is an ancestor."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:47
msgid ""
"If you just know same basics of HTML, you should know the outer element is "
"HTML. In reality there is a child of the document which is the most outer "
"element in the whole HTML DOM."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:52
msgid "**Why is it so important?**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:54
msgid ""
"Knowing an element, you can operate on his children, siblings, parent. You "
"can replace the children order, copy a subtree and so on."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:57
msgid "**What Plezuro can do?**"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:59
msgid "change HTML elements (ex. the text)"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:60
msgid "add HTML elements"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:61
msgid "remove HTML elements"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:62
msgid "clone HTML elements"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:63
msgid "change HTML attributes"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:64
msgid "add HTML attributes"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:65
msgid "remove HTML attributes"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:66
msgid "change CSS styles"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:67
msgid "create new HTML events"
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:69
msgid ""
"It implies some additional features. For example cloning, removing and "
"adding an element, you can move it."
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:2
msgid "jQuery"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:4
msgid ""
"jQuery is a powerful Javascript library which gives you all the browser "
"features that are not included in the pure Javascript and which makes the "
"code shorter and more readable."
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:8
msgid "The main features:"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:10
msgid "DOM element selection"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:11
msgid "DOM manipulation"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:12
msgid "events"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:14
msgid "control of the asynchronous processing"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:15
msgid "extensibility"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:16
msgid "multi-browser support"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:18
msgid ""
"Theoretically jQuery works in the same way in all the browsers. In reality "
"some differences are possible, for example the selector uses the "
"document.querySelectorAll which behaves a little bit differently depending "
"on the browser."
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:23
msgid "To use this library in Plezuro, be aware of:"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:25
msgid ""
"The most common use in Javascript is based on the ``$`` variable. In Plezuro"
" it breaks the rules of the variable naming so you can access to the jQuery "
"with the ``jQuery`` variable or eventually using ``eval('$')``."
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:28
msgid ""
"You must pass the proper variable as the first argument of ``jQuery`` "
"function, not as the zero argument."
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:30
msgid ""
"In Plezuro everything is an object but jQuery selector must be a true "
"Javascript string, so you must invoke the ``toString`` method."
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:0
msgid "jQuery/index.html"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:0
msgid "jQuery/main.plez"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:42
msgid ""
"Fortunately, there is a simpler way to call jQuery in Plezuro using a "
"special binding. Then you use the ``_jQ`` function and the code looks in the"
" following way:"
msgstr ""

#: ../../source/tutorial/browser_programming/jQuery/index.rst:0
msgid "jQuery_binding/main.plez"
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:4
msgid "You can use the standard Javascript ways to output:"
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:6
msgid "printing into an alert box, using ``window.alert()``"
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:7
msgid "printing into the HTML output using ``document.write()``"
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:8
msgid "printing into an HTML element, using ``element.innerHTML=``"
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:9
msgid "printing into the browser console, using ``console.log()``"
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:13
msgid ""
"It looks like Javascript but be aware ex. ``alert()`` without ``window`` "
"will not work unless you pass the ``window`` variable as the zero argument. "
"This is because the zero argument in Plezuro is treated like this object."
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:2
msgid "Storage"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:4
msgid ""
"In programming almost all the time you need to store some data. Part of it "
"is more durable and other part less."
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:7
msgid "In web browser programming you can use the following types of storage:"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:9
msgid "Durable unless the page is reloaded or closed:"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:12
msgid "Javascript memory"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:14
msgid "More durable:"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:16
msgid "localStorage"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:17
msgid "sessionStorage"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:18
msgid "indexedDB"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:19
msgid "cookies"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:21
msgid ""
"Naturally, in Plezuro you have the full access to all of them. Moreover "
"there is easy memory sharing between Plezuro and Javascript with global "
"variables or object fields (public as well private)."
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:0
msgid "storage/index.html"
msgstr ""

#: ../../source/tutorial/browser_programming/storage/index.rst:0
msgid "storage/main.plez"
msgstr ""

#: ../../source/tutorial/about/how_to/index.rst:15
msgid ""
"Using the plezuro.jar (download from "
"https://plezuro.herokuapp.com/downloads/plezuro.jar) executable you can "
"compile a script from Plezuro to Javascript. It works for entire files, not "
"a code embedded in HTML. You can use it within a browser, in the server side"
" (using Node.js), for the mobile development (using Cordova) or any other "
"technology that uses Javascript. Another important thing is to attach the "
"plezuro.js (download from "
"https://plezuro.herokuapp.com/downloads/plezuro.js) library (in HTML for "
"browser and Cordova or using 'require' for Node.js). There is an automated "
"support for all the Javascript libraries because you can use all the global "
"variables from the Javascript. A variable cannot contain the dollar sign in "
"its name in contrary to the Javascript so using jQuery instead of a dollar "
"sign you should use the variable jQuery or eventually ``eval('$')``."
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:16
msgid ""
"The action of an operator depends of the type of the zero argument. It "
"behaves in the same way like the method call. It is possible to change the "
"operators action in the runtime (even you can cause that 2+2 produce another"
" result than 4 so it is not recommended to change it in abundance)."
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:57
msgid ""
"double-argument operators (the zero argument, the operator, the first "
"argument; from the evaluated at the end to the evaluated at the begin)"
msgstr ""

#: ../../source/tutorial/objective/constructor/index.rst:4
msgid ""
"Technically it would be possible to create an object without constructor. "
"You could initialize all the fields with one or multiple methods (using the "
"builder pattern). Eventually after that you could freeze the entire object "
"or some of its fields."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:79
msgid ""
"You can change the CSS style. You can use the CSS name with a hyphen ``-`` "
"as well the camelcase. For example ``element['style']['backgroundColor'] = "
"'red'``"
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:141
msgid "It fires when a key is being pressed (even multiple times)."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:18
msgid ""
"It stands for HTML Document Object Model. It represents a tree of objects."
msgstr ""

#: ../../source/tutorial/about/origin/index.rst:9
msgid "Useful materials"
msgstr ""

#: ../../source/tutorial/about/origin/index.rst:13
msgid "https://github.com/oprogramador/plezuro_js"
msgstr ""

#: ../../source/tutorial/about/origin/index.rst:15
msgid "Official website:"
msgstr ""

#: ../../source/tutorial/about/origin/index.rst:11
msgid "On Github:"
msgstr ""

#: ../../source/tutorial/about/origin/index.rst:17
msgid "https://plezuro.herokuapp.com"
msgstr ""

#: ../../source/tutorial/browser_programming/index.rst:7
msgid "**What should you know first?**"
msgstr ""

#: ../../source/tutorial/basics/builtin_methods/index.rst:4
msgid ""
"In further reading you will take some knowledge of modules and methods in "
"Plezuro. However at this moment you should know how the method works. "
"Basically it is like a function calling. Zero argument (called this object) "
"is accessible via the keyword 'this'. Like in the function you can also use "
"such keywords 'first', 'second', 'third', 'args'. Calling a method, at the "
"first you write the zero argument (this object), than the dot ``.``, "
"function name, bracket opening ``(``, arguments separated by the comma ``,``"
" and the bracket closing ``)``. However with no arguments the bracket is not"
" required."
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:11
msgid ""
"The most basic one is the list. To create a list, you use square brackets "
"(``[``, ``]``), the elements are separated by a comma ``,``. It can contain "
"objects of different types (like list in Python, Ruby, Javascript or PHP as "
"well List<Object> in Java or List<object> in c♯). It implies that a list can"
" also contain other lists. Moreover a list can contain a self-reference (it "
"means one of its elements is a pointer to this list) because the lists are "
"passed by reference to functions and to collections."
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:26
msgid ""
"To create a set, you use dollar sign ``$`` and brackets. This collections is"
" like the mathematical set. Each value can be contained only once."
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:36
msgid ""
"Basically it is a set of pairs key-value. It is like dictionary in Python, "
"hash in Ruby, Dictionary<object, object> in c♯ or Map<Object, Object> in "
"Java. However there is a notably difference between the Plezuro dictionary "
"and associative array in PHP or object in Javascript because in the "
"dictionary the order of the items does not matter and generally it is stored"
" using a binary tree. You write it with a hash sign ``#`` and brackets."
msgstr ""

#: ../../source/tutorial/basics/collections/index.rst:50
msgid ""
"It is like the associative array in PHP or object in Javascript. In the "
"version of Plezuro compiled to Javascript the main appliance of this "
"collection is to pass Javascript objects to methods from libraries. You "
"write it with a percent sign ``%`` and brackets."
msgstr ""

#: ../../source/tutorial/basics/comments/index.rst:4
msgid ""
"The comments are like in c++, Java, and c♯. You can comment one line using "
"``//`` or multiple lines using ``/*`` and ``*/``."
msgstr ""

#: ../../source/tutorial/basics/functions/index.rst:4
msgid ""
"To write a function, you use just the curlies (``{``, ``}``). Everything in "
"a curly bracket is a function. It includes also conditionals and loops. The "
"zero argument is accessible via the keyword 'this' and the next ones "
"'first', 'second' and 'third'. You have also access to the array of the "
"arguments using the keyword 'args'."
msgstr ""

#: ../../source/tutorial/basics/magic_constants/index.rst:2
msgid "Magic constants"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:4
msgid ""
"One of the important features of a programming language are operators. "
"Technically it would be possible to create a language without operators. "
"However it facilities much the syntax. For example in an expression ``1+3`` "
"we have an operator ``+`` which does the addition. In comparison with other "
"languages, Plezuro has some special operators such as the comma ``,`` or the"
" semicolon ``;``."
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:10
msgid ""
"An important issue in Plezuro is you cannot have any operator immediately "
"(excluding whitespaces and comments) before bracket ``)``, square bracket "
"``]`` and curly ``}`` close. So after the last element of the list you "
"cannot put the comma and after the last statement of the function you cannot"
" put the semicolon. In such a case it would be a syntax error."
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:45
msgid "``!``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:46
msgid "``&&``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:47
msgid "``**``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:48
msgid "``#``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:49
msgid "``~``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:50
msgid "``=>``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:54
msgid "``++``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:55
msgid "``--``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:60
msgid "``;``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:61
msgid "``,``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:62
msgid "``:=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:63
#: ../../source/tutorial/basics/operators/index.rst:67
msgid "``=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:64
msgid "``+=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:65
msgid "``-=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:66
msgid "``*=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:68
msgid "``^=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:69
msgid "``&=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:70
msgid "``|=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:71
msgid "``%=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:72
msgid "``.=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:73
msgid "``~~``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:74
msgid "``<->``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:75
msgid "``<<``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:76
msgid "``>>``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:77
msgid "``?``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:78
msgid "``|``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:79
msgid "``&``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:80
msgid "``<=>``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:81
msgid "``>=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:82
msgid "``>``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:83
msgid "``<=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:84
msgid "``<``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:85
msgid "``!=``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:86
msgid "``==``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:87
msgid "``!==``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:88
msgid "``===``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:89
msgid "``=~``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:90
msgid "``!~``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:91
msgid "``+``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:92
msgid "``-``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:93
msgid "``%``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:94
msgid "``*``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:95
msgid "``/``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:96
msgid "``^``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:97
msgid "``^^``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:98
msgid "``.``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:99
msgid "``..``"
msgstr ""

#: ../../source/tutorial/basics/operators/index.rst:100
msgid "``:``"
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:4
msgid ""
"Probably the most basic feature of a programing language are the variables. "
"What is it? The variable is a block of a program memory that you can change "
"at the runtime. You can assign it to a symbol and it works like the "
"mathematics. The only difference is a variable can change his value. For "
"example ``$x = 2 + 5; $y = x * 2``."
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:10
msgid ""
"In the Plezuro like in the majority of the programming languages a variable "
"name can begin with a letter or an underscore ``_`` and the next characters "
"of the name can be a letter, an underscore or a digit. The case of the "
"characters matters (like in c, Java, Python and so on, differently from SQL "
"and HTML). You can use only the ASCII letters. It is for the readability (it"
" would be extremely strange if someone used Arabic, Chinese characters or "
"some mix of them). The recommended style of the naming all the variables "
"(including functions and modules) is the camelcase (ex. "
"```aVeryInterestingVariable```)."
msgstr ""

#: ../../source/tutorial/basics/variables/index.rst:32
msgid ""
"The scope of a variable is limited within the curlies (``{``, ``}``) which "
"are used for the function (even a conditional or a loop it is used an inner "
"function). So if you want to use a variable across multiple functions, you "
"have to declare it in a propriate place."
msgstr ""

#: ../../source/tutorial/browser_programming/ajax/index.rst:14
msgid ""
"From a client-side developper point of view it enables the communication "
"with the server without page reloading. For example you would like to store "
"some data on the server for security reasons, check if a data provided by "
"the user matches that on the server or download some content dynamically "
"(HTML, CSS, images, other Javascripts) that would be enormous if downloaded "
"fully."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:4
msgid ""
"After previous chapters you are able to create any HTML document statically "
"with ``doument.write``. But probably you wonder to create an interactive "
"app. For example after button pressing an input will change its value."
msgstr ""

#: ../../source/tutorial/browser_programming/html_dom_methods/index.rst:58
msgid ""
"It returns the collection of all the elements that match to the given CSS "
"selector."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:4
msgid ""
"In HTML programming (not each web browsew programming is HTML programming "
"because you can use eventually Java applets, Adobe Flash or Silverlight "
"which are deprecated technologies) almost all you see in the browser are the"
" HTML elements. The exceptions include alerts and different sorts of info "
"from browser."
msgstr ""

#: ../../source/tutorial/browser_programming/html_elements/index.rst:22
msgid ""
"It can be an atomic part of the view you see in the browser (ex. an input, a"
" button, a span), as well something you cannot see (because it is hidden, it"
" has the 0 size or it contains no text) or a tree of other elements."
msgstr ""

#: ../../source/tutorial/browser_programming/output/index.rst:11
msgid "However recommended is the Plezuro way using ``dumpl`` method."
msgstr ""

#: ../../source/tutorial/index.rst:8
msgid ""
"If you are a programmer who just knows another programming language (ex. c, "
"Java, Python...), this tutorial will bring you the knowledge necessary to "
"create applications in Plezuro. Nonetheless the experience is what is the "
"most important in programming technologies. So just try to write more and "
"more in Plezuro."
msgstr ""

#: ../../source/tutorial/index.rst:14
msgid ""
"If you are new to programming, this tutorial should be readable for you "
"because it explaines how the stuff works but if you do not understand it, "
"maybe you should learn first the basics of Javascript (it is the most "
"related to Plezuro) or eventually another programming language."
msgstr ""

#: ../../source/tutorial/objective/constructor/index.rst:8
msgid ""
"However for readability of the source code, it is a good idea to use "
"constructors. What is exactly the constructor? It is a method that is "
"invoked immediately after the memory allocation for the object. It is very "
"explicit in Objective C when you at first allocate the memory and later you "
"initialize it (for most cases it is in the same line)."
msgstr ""

#: ../../source/tutorial/objective/constructor/index.rst:21
msgid ""
"However when you do not write any constructor, there exists a constructor "
"that is invoked. It is called the default constructor. What does it exactly "
"do? It invokes the constructors of all the parent modules. When a module "
"does not have any explicit parents it inherits from the BasicModule so in "
"such a situation the constructor of the BasicModule is called - it creates "
"the fields of the object from the associative array which is passed as the "
"first argument."
msgstr ""

#: ../../source/tutorial/objective/inheritance/index.rst:11
msgid ""
"How does it work? Is is pretty simple, when you invoke a method on an "
"object, if there exists such a method directly in the module of this object,"
" this method is called. Otherwise it is a method from one of the parents of "
"the module (the order of finding a method is the same as the order of "
"declaring the parents in the module. The algorithm of finding a method is "
"recursive. When no method is found, an exception is thrown. It is as you can"
" see it. However in reality in the moment of the module creation all the "
"methods are binded (direct ones and inherited ones), it is for the "
"performance."
msgstr ""

#: ../../source/tutorial/objective/inheritance/index.rst:20
msgid ""
"What about the polymorphism? Plezuro like other dynamic languages has a duck"
" typing. So you can invoke a method with a specific name from an object, not"
" knowing the module of the object. On the other hand, you can use the "
"multiple inheritance. You can create a module with a specific method and you"
" can use objects of this module in other methods or functions."
msgstr ""

#: ../../source/tutorial/objective/inheritance/index.rst:30
msgid ""
"One of useful features is the possibility of the calling a parent method. "
"The syntax is similar to the Python because in the case of multiple "
"inheritance, you have to specify from which parent you want to call a "
"method. It is also possible to call a method from a super-parent and even "
"from any other class because of duck typing. You write a parent module name,"
" the double colon ``::``, the method name and the 'this' keyword as the zero"
" argument."
msgstr ""

#: ../../source/tutorial/objective/modules/index.rst:4
msgid ""
"Modules are in the same time classes and namespaces. You can use a module to"
" create an object, you can use it statically (like static fields and methods"
" in Java) and you can assign other modules as static fields creating "
"namespaces. Of course you can create multiple classes in the same source "
"file, however it is recommended to write exactly one module in one file."
msgstr ""

#: ../../source/tutorial/objective/modules/index.rst:15
msgid "You can create an object of a module using the 'new' method."
msgstr ""

#: ../../source/tutorial/objective/objects_and_methods/index.rst:4
msgid ""
"The main purpose of creating a module is to use it as a template to creating"
" objects and to call methods from the objects. When you call a method, the "
"object is accessible via the keyword 'this' and like in the function "
"invocation you can use the keywords 'first', 'second', 'third' and 'args'."
msgstr ""

#: ../../source/tutorial/objective/objects_and_methods/index.rst:14
msgid ""
"To access an object field, you use the at sign ``@`` and the field name. The"
" fields can be created in the constructor when the object is created or "
"later in any method."
msgstr ""

#: ../../source/tutorial/objective/objects_and_methods/index.rst:21
msgid ""
"To call a method from another method, you write the 'this' keyword, the dot "
"``.`` and the method name. Like in the methods calling from outer objects "
"you can omit the bracket when it is no arguments."
msgstr ""

#: ../../source/tutorial/objective/operators/index.rst:4
msgid ""
"Similar to defining the method of a module, you can define actions that will"
" be done when an object interacts with a specific operator."
msgstr ""

#: ../../source/tutorial/basics/magic_constants/index.rst:4
msgid ""
"Similar to PHP and Ruby, Plezuro has the magic constants. What is it and why"
" to use it? It is something a little bit like a variable and a little bit "
"like a constant. Its value depends on the place where it is used."
msgstr ""

#: ../../source/tutorial/basics/magic_constants/index.rst:8
msgid "So we have the following magic constants:"
msgstr ""

#: ../../source/tutorial/basics/hello_world/index.rst:2
msgid "Hello world"
msgstr ""

#: ../../source/tutorial/basics/hello_world/index.rst:4
msgid ""
"'Hello world' in computing means the simpler application in a specific "
"programming language. It shows generally how a language looks."
msgstr ""

#: ../../source/tutorial/basics/hello_world/index.rst:7
msgid ""
"There are several ways in Plezuro to write it. It is a scripting language so"
" there is required no main function nor class. The simpler script just "
"returns a value. You can also use the 'dumpl' method for printing to a "
"buffer (in most cases the console)."
msgstr ""

#: ../../source/tutorial/basics/magic_constants/index.rst:10
msgid ""
"__pos__ - the horizontal position in a line (counting from 0, it is the "
"position where the keyword begins)"
msgstr ""

#: ../../source/tutorial/basics/random/index.rst:2
msgid "Random"
msgstr ""

#: ../../source/tutorial/basics/random/index.rst:4
msgid ""
"In computing it is useful for many purposes to generate random numbers and "
"random strings. For example, when you write a computer player to a game or "
"in a web application to generate registration links, local or web addresses "
"and so on."
msgstr ""

#: ../../source/tutorial/basics/random/index.rst:10
msgid ""
"In Plezuro it is quite easy. For a random number you do not have to invoke "
"any function or method (however later it is compiled to a method "
"invocation). Just write the 'rand' keyword and you will obtain a number from"
" the uniform distribution between 0 and 1."
msgstr ""

#: ../../source/tutorial/basics/random/index.rst:15
msgid ""
"To generate a random string, use ``String.rand``. The first parameter "
"specifies the length of the result, its default value is 32. The result is "
"composed from letters, digits and underscores."
msgstr ""

#: ../../source/tutorial/basics/regex/index.rst:2
msgid "Regex"
msgstr ""

#: ../../source/tutorial/basics/regex/index.rst:4
msgid ""
"Beside of imperative programming (as it is in Plezuro), there exist also "
"other programming paradigms. It means you can do the same staff in totally "
"different ways. It can sound a little bit complicated but it often makes "
"hard problems easy."
msgstr ""

#: ../../source/tutorial/basics/regex/index.rst:8
msgid ""
"One of these paradigms is the regex (regular expression). It looks like a "
"normal text but there are included some special characters which can mean "
"one of multiple characters, a repetition of a string and so on. It is really"
" useful for web forms validation (ex. postcode, name, date)."
msgstr ""

#: ../../source/tutorial/basics/regex/index.rst:12
msgid ""
"Dependently on the engine, regular expressions behave in different ways. "
"Currently Plezuro uses predefined regex engines so in the version compiled "
"to Javascript the rules are the same as in Javascript. You can learn it from"
" http://www.w3schools.com/jsref/jsref_obj_regexp.asp ."
msgstr ""

#: ../../source/tutorial/basics/regex/index.rst:20
msgid ""
"For testing a regex (checking if a string matches to a specific regex), use "
"the ``=~`` operator. (The order does not matter, either string - operator - "
"regex or regex - operator - string.) There exists also an operator which "
"negates it ``!~``."
msgstr ""

#: ../../source/tutorial/basics/regex/index.rst:16
msgid ""
"The syntax is the following: ``r`` and the text in single or double quotes. "
"For a single quote inside the single quotes, write it twice and the same in "
"the case of a double quote inside double quotes (ex. ``r\"ab\"\"cd\"``, "
"``r'ef''gh'``)."
msgstr ""

#: ../../source/tutorial/basics/functions/index.rst:9
msgid ""
"The function returns the value of the last statement (like in Ruby). There "
"is no ``return`` keyword."
msgstr ""

#: ../../source/tutorial/basics/loops/index.rst:20
msgid ""
"Next one is 'each'. It is used to iterate a list. In the inner function the "
"zero argument is the index of the current element and the first one is the "
"element."
msgstr ""

#~ msgid "The function returns the value of the last statement (like in Ruby)."
#~ msgstr ""

#~ msgid ""
#~ "You can return a value with 'return' keyword. When in function execution no "
#~ "previous value has been returned, it returns the value of the last statement"
#~ " (like in Ruby)."
#~ msgstr ""

#~ msgid ""
#~ "The syntax is the following: ``r`` and the text in single or double quotes. "
#~ "For a single quote inside the single quotes, write it twice and the same in "
#~ "case of a double quote inside double quotes (ex. ``r\"ab\"\"cd\"``, "
#~ "``r'ef''gh'``)."
#~ msgstr ""

#~ msgid ""
#~ "For testing a regex (checking if a string matches to a specific regex), use "
#~ "the ``=~`` operator. (The order does not matter, either string - operator - "
#~ "regex or regex - operator - string). There exists also an operator which "
#~ "negates it ``!~``."
#~ msgstr ""

#~ msgid ""
#~ "To generate a random string, use `String.rand`. The first parameter "
#~ "specifies the length of the result, its default value is 32. The result is "
#~ "composed from letters, digits and underscores."
#~ msgstr ""

#~ msgid "Random numbers"
#~ msgstr ""

#~ msgid ""
#~ "In computing it is useful for many purposes to generate random numbers. For "
#~ "example, when you write a computer player to a game or in a web application "
#~ "to generate registration links, local or web addreses and so on."
#~ msgstr ""

#~ msgid ""
#~ "In Plezuro it is quite easy. You do not have to invoke any function or "
#~ "method (however later it is compiled to a method invokation). Just write the"
#~ " 'rand' keyword and you will obtain a number from the uniform distribution "
#~ "between 0 and 1."
#~ msgstr ""
